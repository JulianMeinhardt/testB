!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/material"),require("@angular/core")):"function"==typeof define&&define.amd?define("adesso-grid-lib",["exports","@angular/common","@angular/material","@angular/core"],e):e(t["adesso-grid-lib"]={},t.ng.common,t.ng.material,t.ng.core)}(this,function(t,e,r,n){"use strict";var o=(a.prototype.exists=function(t,e,n){if(!t[n])throw new Error('Property "'+n+'"  is missing in '+e+"!")},a.prototype.allExist=function(t,e,n){var r,o;try{for(var a=function c(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}(n),i=a.next();!i.done;i=a.next()){var l=i.value;this.exists(t,e,l)}}catch(s){r={error:s}}finally{try{i&&!i.done&&(o=a["return"])&&o.call(a)}finally{if(r)throw r.error}}},a.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],a.ctorParameters=function(){return[]},a.ngInjectableDef=n.defineInjectable({factory:function(){return new a},token:a,providedIn:"root"}),a);function a(){}var i=(l.prototype.ngAfterViewInit=function(){this.inputVerifierService.exists(this,"CustomTemplateDirective","property")},l.decorators=[{type:n.Directive,args:[{selector:"[libCustomTemplate]"}]}],l.ctorParameters=function(){return[{type:n.TemplateRef},{type:o}]},l.propDecorators={property:[{type:n.Input}]},l);function l(t,e){this.templateRef=t,this.inputVerifierService=e}var c=(s.prototype.ngAfterViewInit=function(){var e=this;this.inputVerifierService.allExist(this,"TabbedGridComponent",["computeTabLabel","tableDefinition","detailsTemplate"]),this.customTemplateDirectives.forEach(function(t){if(e.customTemplateRefs[t.property])throw new Error("Duplicate custom template definition found for "+t.property);e.customTemplateRefs[t.property]=t.templateRef})},s.prototype.rowClick=function(e){var t=this.tabs.findIndex(function(t){return t.row.id===e.id});-1===t?(this.tabs.push({label:this.computeTabLabel(e.data),row:e}),this.selectedTabIndex=this.tabs.length):this.selectedTabIndex=t+1},s.prototype.closeTab=function(t){this.tabs.splice(t,1),t===this.selectedTabIndex-1&&(this.selectedTabIndex=0)},s.prototype.getCustomTemplate=function(t){var e=this.customTemplateRefs[t];if(!e)throw new Error("Could not find custom template definition for "+t);return e},Object.defineProperty(s.prototype,"tableData",{set:function(t){if(t){var e=0,n=t.map(function(t){return{data:t,id:e++}});this.dataSource=new r.MatTableDataSource(n),this.dataSource.sortingDataAccessor=function(t,e){return t.data[e]},this.dataSource.sort=this.sort}else this.dataSource=null},enumerable:!0,configurable:!0}),s.decorators=[{type:n.Component,args:[{selector:"lib-tabbed-grid",template:'<mat-tab-group [(selectedIndex)]="selectedTabIndex">\r\n  <mat-tab label="Overview">\r\n    <table mat-table [dataSource]="dataSource" matSort class="full-width">\r\n\r\n      <ng-container *ngFor="let column of tableDefinition.columns">\r\n        <ng-container matColumnDef="{{ column.property }}">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>{{ column.label }}</th>\r\n          <td mat-cell *matCellDef="let row">\r\n            <ng-container *ngIf="column.customContent">\r\n              <ng-container *ngTemplateOutlet="getCustomTemplate(column.property); context: { $implicit: row.data }">\r\n              </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf="!column.customContent">\r\n              <ng-container *ngIf="column.type == \'TEXT\' || column.type == \'NUMBER\'">\r\n                {{ row.data[column.property] }}\r\n              </ng-container>\r\n              <ng-container *ngIf="column.type == \'DATE\'">\r\n                {{ row.data[column.property] | date: \'medium\'  }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef="tableDefinition.displayedColumns"></tr>\r\n      <tr mat-row *matRowDef="let row; columns: tableDefinition.displayedColumns" class="table-row" (click)="rowClick(row)"></tr>\r\n    </table>\r\n  </mat-tab>\r\n  <mat-tab *ngFor="let tab of tabs; let index = index">\r\n    <ng-template mat-tab-label>\r\n      {{ tab.label }}\r\n      <span class="close-tab" (click)="closeTab(index)">X</span>\r\n    </ng-template>\r\n\r\n    <ng-container *ngTemplateOutlet="detailsTemplate; context: { $implicit: tab.row.data }"></ng-container>\r\n  </mat-tab>\r\n</mat-tab-group>',styles:[".full-width{width:100%}.table-row{cursor:pointer}.close-tab{cursor:pointer;color:red;position:absolute;right:10px;top:16px}"]}]}],s.ctorParameters=function(){return[{type:o}]},s.propDecorators={computeTabLabel:[{type:n.Input}],tableDefinition:[{type:n.Input}],displayedColumns:[{type:n.Input}],detailsTemplate:[{type:n.ContentChild,args:["detailsTemplate"]}],customTemplateDirectives:[{type:n.ContentChildren,args:[i]}],sort:[{type:n.ViewChild,args:[r.MatSort]}],tableData:[{type:n.Input}]},s);function s(t){this.inputVerifierService=t,this.tabs=[],this.selectedTabIndex=0,this.customTemplateRefs={}}var p=(u.decorators=[{type:n.NgModule,args:[{imports:[e.CommonModule,r.MatSortModule,r.MatTabsModule,r.MatTableModule],declarations:[c,i],exports:[c,i]}]}],u);function u(){}t.AdessoAngularLibModule=p,t.TabbedGridComponent=c,t.ColumnType={TEXT:"TEXT",DATE:"DATE",NUMBER:"NUMBER",ENUM:"ENUM"},t.ɵa=i,t.ɵb=o,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=adesso-grid-lib.umd.min.js.map